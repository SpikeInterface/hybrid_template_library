{"version":3,"file":"static/js/466.df7a3c82.chunk.js","mappings":"wLAuBIA,GAnBIC,EAAG,MAAMC,EAGfC,WAAAA,GAAuB,IAAXC,EAAKC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAClB,IADmBG,EAAAA,EAAAA,GAAA,qBACfJ,EAAQ,GAAKA,EAAQ,EACvB,MAAM,IAAIK,MAAM,gEAElBC,KAAKN,MAAQA,CACf,CACA,iBAAOO,CAAUC,GAAY,IAAX,MAAER,GAAOQ,EACzB,OAAO,IAAIV,EAAME,EACnB,CACAS,MAAAA,CAAOC,GACL,OAAOC,EAAAA,GAAgBD,EAAM,CAAEV,MAAOM,KAAKN,OAC7C,CACAY,MAAAA,CAAOF,GACL,OAAOC,EAAAA,GAAkBD,EAC3B,IACDN,EAAAA,EAAAA,GAAAP,EAAA,UAjBkB,QAAMA,E","sources":["../node_modules/@zarrita/core/node_modules/numcodecs/dist/gzip.js"],"sourcesContent":["import \"./chunk-INHXZS53.js\";\n\n// src/gzip.ts\nimport * as fflate from \"fflate\";\nvar GZip = class GZip2 {\n  static codecId = \"gzip\";\n  level;\n  constructor(level = 1) {\n    if (level < 0 || level > 9) {\n      throw new Error(\"Invalid gzip compression level, it should be between 0 and 9\");\n    }\n    this.level = level;\n  }\n  static fromConfig({ level }) {\n    return new GZip2(level);\n  }\n  encode(data) {\n    return fflate.gzipSync(data, { level: this.level });\n  }\n  decode(data) {\n    return fflate.gunzipSync(data);\n  }\n};\nvar gzip_default = GZip;\nexport {\n  gzip_default as default\n};\n"],"names":["gzip_default","_GZip","GZip2","constructor","level","arguments","length","undefined","_defineProperty","Error","this","fromConfig","_ref","encode","data","fflate","decode"],"sourceRoot":""}